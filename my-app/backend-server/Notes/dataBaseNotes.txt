//mongosh -> opening mongodb shell (CLI interaction only )
//mongod -> now we can open the data base and use it via port in our application 

//Data bases commands here bro 
//show all data base 
show dbs

//switch to data base 
 use database-name

 //display current data base 
 db

 //create a new data base (or) use existing data base
 use database-name

 //Display the data base using 
 db.getName()

 //Drop the data base 
 db.dropDatabase()

 //show collection
 show collection

 //create collection => using mongodb (cli)
 db.createCollection("collection-name)


//These commands should be run in the terminal bro 
//collection => is the collection names like ..user,ratings,

// Step 1: Inserting a Document
db.collection.insertOne({ field1: value1, field2: value2, ... });

// Step 2: Querying Documents
db.collection.find({ field: value });

// Step 3: Updating a Document
db.collection.updateOne({ field: value }, { $set: { updatedField: updatedValue } });

// Step 4: Deleting Documents
db.collection.deleteOne({ field: value });

// Step 5: Aggregation Pipeline
db.collection.aggregate([
  { $group: { _id: "$field", total: { $sum: "$quantity" } } },
  { $sort: { total: -1 } },
  { $limit: 5 }
]);

// Step 6: Index Creation
db.collection.createIndex({ field: 1 });

// Step 7: Joining Collections (using $lookup)
db.orders.aggregate([
  {
    $lookup:
      {
        from: "products",
        localField: "product_id",
        foreignField: "_id",
        as: "orderDetails"
      }
  }
]);

// Step 8: Filtering and Counting
db.collection.find({ status: "active" }).count();

// Step 9: Sorting Documents
db.collection.find().sort({ field: 1 }); // 1 for ascending, -1 for descending

// Step 10: Limiting Results
db.collection.find().limit(10);

==========================================================================================================

//Create the collection ==>
 //create collection => using mongodb (cli)
 db.createCollection("collection-name)

 //creating the collection using mongoose in the server.js
  db.createCollection("your_collection_name", (err, res) => {
    if (err) throw err;
    console.log("Collection created!");
    client.close();
  });

//Access the collection =>
db.users  -> user is the collection-name


//Showing the collection  ===>

//showing collections in the mongoose
const mongoose = require('mongoose');

const db = mongoose.connection;
const collections = await db.listCollections();
console.log(collections);


================================================================================

//here Defining the schema having 100 attributes (key ) and i wanna select only two query during model 
using mongoose in server.js field

//defined the schema
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: String,
  age: Number,
  city: String,
  // ... (other 97 fields)
});

//'User' it is the db name which is defined in my data base bro 
const User = mongoose.model('User', userSchema);

const User = require('./userModel'); // Assuming this is how you've exported your User model

// Retrieve only name and age ,,,,,,,,exec is like callback function 
User.find({ /* your query criteria here */ }).select('name age').exec((err, users) => {
  if (err) return console.error(err);
  console.log('Users:', users);
});



